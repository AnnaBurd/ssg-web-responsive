---
import "nouislider/dist/nouislider.css"; // CSS styles required by nouislider lib (https://refreshless.com/nouislider/)

const { id, min, max } = Astro.props;
---

<slider-bar class="slider-bar" id={id} data-max={max} data-min={min}
></slider-bar>

<style lang="sass" is:global>
  /* Override styles generated by nouislider */
  .noUi-target
    display: block
    cursor: pointer
    border: none
    box-shadow: none
    height: 1.1rem

    .noUi-connects
      background: var(--color-grey-dark-3)

    .noUi-connect
      background: var(--color-intermediate-1)

    .noUi-handle
      cursor: pointer
      background: var(--color-intermediate-1)
      border: none
      box-shadow: none
      height: 2.2rem
      width: 2.2rem
      border-radius: var(--border-radius-medium)
      top: -.45rem
      right: -1.1rem
      &::before
        display: none
      &::after
        background: rgba(89, 116, 124, 0.6)
        width: 100%
        height: 100%
        top: 0
        left: 0
        border-radius: 1rem
        transition: all .2s
      &:active
        &::after
          outline: solid .3rem rgba(89, 116, 124, 0.2)
          width: 110%
          height: 110%
          top: -5%
          left: -5%
    .noUi-tooltip
      border: none
      padding: 0
      background: none
      font-size: 1rem
      font-weight: 500
      letter-spacing: -0.05em
      color: var(--color-grey-dark-2)
      bottom: .6rem !important
      // right: 0% !important

    .noUi-background
      background-image: linear-gradient(to right, #a2ea4c 20%, #07aa91 20%, #07aa91 80%, #a2ea4c 80%) !important

  #sliderArea
    .noUi-tooltip::after
      content: "\00am²"

  #sliderPrice
    .noUi-tooltip::after
      content: "\00atỷ"
</style>

<script>
  import noUiSlider from "nouislider";

  class Slider extends HTMLElement {
    #slider;

    constructor() {
      super();

      // Read max and min values
      let maxValue = Number(this.dataset.max) || 100;
      let minValue = Number(this.dataset.min) || 0;

      this.#slider = noUiSlider.create(this, {
        start: [0, maxValue], // initial positions of tooltips
        tooltips: [true, true], // two draggable tooltips
        connect: true, // connect section between tooltips (for css styles)
        format: {
          to: function (value) {
            // format number, e.g. add text etc.
            return Math.round(value)
              .toString()
              .replace(/\B(?=(\d{3})+(?!\d))/g, " ");
          },
          from: function (value) {
            // get numeric value from formatted number
            return Number(value);
          },
        },
        range: {
          min: minValue,
          max: maxValue,
        },
      });

      Slider.mergeTooltips(
        this,
        ((maxValue - minValue) / maxValue) * 15, // TODO adjust
        " - "
      );

      console.log(this.getValues());
    }

    getValues() {
      console.log("Call get values");
      return this.#slider.get();
    }

    /**
     * Function to join tooltips (numbers over handles) for values that are too close to each other.
     * @param slider HtmlElement with an initialized slider
     * @param threshold Minimum proximity (in percentages) to merge tooltips
     * @param separator String joining tooltips
     *
     * https://themesbrand.com/velzon/docs/flask/nouislider.html
     */
    static mergeTooltips(slider, threshold, separator) {
      let textIsRtl = getComputedStyle(slider).direction === "rtl";
      let isRtl = slider.noUiSlider.options.direction === "rtl";
      let isVertical = slider.noUiSlider.options.orientation === "vertical";
      let tooltips = slider.noUiSlider.getTooltips();
      let origins = slider.noUiSlider.getOrigins();

      // Move tooltips into the origin element. The default stylesheet handles this.
      tooltips.forEach(function (tooltip, index) {
        if (tooltip) {
          origins[index].appendChild(tooltip);
        }
      });

      slider.noUiSlider.on(
        "update",
        function (values, handle, unencoded, tap, positions) {
          let pools = [[]];
          let poolPositions = [[]];
          let poolValues = [[]];
          let atPool = 0;

          // Assign the first tooltip to the first pool, if the tooltip is configured
          if (tooltips[0]) {
            pools[0][0] = 0;
            poolPositions[0][0] = positions[0];
            poolValues[0][0] = values[0];
          }

          for (let i = 1; i < positions.length; i++) {
            if (!tooltips[i] || positions[i] - positions[i - 1] > threshold) {
              atPool++;
              pools[atPool] = [];
              poolValues[atPool] = [];
              poolPositions[atPool] = [];
            }

            if (tooltips[i]) {
              pools[atPool].push(i);
              poolValues[atPool].push(values[i]);
              poolPositions[atPool].push(positions[i]);
            }
          }

          pools.forEach(function (pool, poolIndex) {
            let handlesInPool = pool.length;

            for (let j = 0; j < handlesInPool; j++) {
              let handleNumber = pool[j];

              if (j === handlesInPool - 1) {
                let offset = 0;

                poolPositions[poolIndex].forEach(function (value) {
                  offset += 1000 - value;
                });

                let direction = isVertical ? "bottom" : "right";
                let last = isRtl ? 0 : handlesInPool - 1;
                let lastOffset = 1000 - poolPositions[poolIndex][last];
                offset =
                  (textIsRtl && !isVertical ? 100 : 0) +
                  offset / handlesInPool -
                  lastOffset;

                // Center this tooltip over the affected handles
                if (offset === 0 && poolValues[poolIndex].length > 1) {
                  tooltips[handleNumber].innerHTML = poolValues[poolIndex][0];
                } else {
                  tooltips[handleNumber].innerHTML =
                    poolValues[poolIndex].join(separator);
                  tooltips[handleNumber].style.display = "block";
                  tooltips[handleNumber].style[direction] = offset + "%";
                }
              } else {
                // Hide this tooltip
                tooltips[handleNumber].style.display = "none";
              }
            }
          });
        }
      );
    }
  }

  // Tell the browser to use Slider class for <slider-bar> elements.
  customElements.define("slider-bar", Slider);
</script>
