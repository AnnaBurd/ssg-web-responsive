---
import "@splidejs/splide/dist/css/splide.min.css";

const { land } = Astro.props;
---

<!-- TODO img sizes! -->
<fullscreen-gallery class="fullscreen-gallery">
  <div
    class="fullscreen-gallery__main splide main-splide"
    aria-label={`Photos of ${land.title} land`}
  >
    <div class="splide__track">
      <ul class="splide__list">
        {
          land.images?.map((imgURL) => (
            <li class="splide__slide">
              <div class="fullscreen-gallery__img-wrapper">
                <img data-splide-lazy={imgURL} />
              </div>
            </li>
          ))
        }
        {
          land.videos?.map((vidURL) => (
            <li class="splide__slide">
              <video width="100%" height="100%" preload="none" muted controls>
                <source src={vidURL} type="video/mp4" />
                Sorry, your browser doesn't support embedded videos.
              </video>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
  <div
    class="fullscreen-gallery__thumbnail splide thumbnail-splide"
    aria-label="Thumbnails for image gallery"
  >
    <div class="splide__track">
      <ul class="splide__list">
        {
          land.images?.map((imgURL) => (
            <li class="splide__slide">
              <div class="fullscreen-gallery__thumbnail-wrapper">
                <img src={imgURL} />
              </div>
            </li>
          ))
        }
        {
          land.videos?.map((vidURL) => (
            <li class="splide__slide">
              <img src={vidURL} />
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</fullscreen-gallery>

<style lang="sass">
  .fullscreen-gallery
    // background: pink
    width: 85vw //
    height: 80vh //
    padding-left: 4rem // Space for navigation arrows
    padding-right: 4rem
    display: flex
    flex-direction: column
    /* Style slider */
    &__main
      height: 80%
      width: 100%
      flex: 1 1 1fr
      border-radius: var(--border-radius-medium)
    /* Center image within slide and set rounded corners */
    &__img-wrapper
      height: 100%
      width: 100%
      display: flex
      justify-content: center
      align-items: center
      img
        max-width: 100%
        max-height: 100%
        border-radius: var(--border-radius-medium)

    /* Style thumbnails */
    &__thumbnail
      margin-top: 1.6rem
      height: 12rem
      width: 100%
    &__thumbnail-wrapper
      height: 100%
      width: 100%
      background: black
      border-radius: calc(var(--border-radius-medium) *0.7)
      overflow: hidden
      img
        width: 100%
        height: 100%
        object-fit: cover
        opacity: 0.8
        // border-radius: calc(var(--border-radius-medium) *0.7)
      // background: pink
</style>

<script>
  import Splide from "@splidejs/splide";

  // TODO dynamic! per page:
  //   // A carousel for desktop:
  // {
  //   breakpoints: {
  // 		640: {
  // 			destroy: true,
  // 		},
  //   }
  // }

  // // A carousel for mobile:
  // {
  //   mediaQuery: 'min',
  //   breakpoints: {
  // 		640: {
  // 			destroy: true,
  // 		},
  //   }
  // }

  // initSliders(
  //   mainSplideEl,
  //   mainSplideOptions,
  //   thumbnailSplideEl,
  //   thumbnailSplideOptions
  // );

  class FullscreenGallery extends HTMLElement {
    /* Configure properties of main and thumbnail splides 
    Full reference of options: https://splidejs.com/guides/options/ */
    static mainSplideOptions = {
      type: "slide",
      arrowPath:
        "M25.0132 20.0001L9.84961 35.0808C8.71683 36.2062 8.71683 38.0308 9.84961 39.156C10.9822 40.2813 12.8189 40.2813 13.9518 39.156L31.0186 22.1824C31.6223 21.5828 31.8939 20.7852 31.8542 20.0001C31.8939 19.2149 31.6223 18.4173 31.0186 17.8176L13.9518 0.844067C12.8189 -0.281354 10.9825 -0.281354 9.84961 0.844067C8.71676 1.96949 8.71683 3.79398 9.84961 4.91911L25.0132 20.0001Z", // Arrow ">" path from the svg file, svg must be 40x40 // TODO
      rewind: false, // No jump from end to start
      speed: 800, // The transition time in milliseconds
      perPage: 1, // Images per slide
      perMove: 1,
      updateOnMove: true, // Update the is-active status class just before moving the carousel
      autoplay: false,
      arrows: true,
      pagination: false,
      useIndex: true,
      drag: true,
      keyboard: true,
      lazyLoad: "nearby",
    };

    static thumbnailSplideOptions = {
      direction: "ltr", // Direction of sliding from top-to-bottom
      width: "100%", // Slider line takes full width of its container (shrinks adaptively for device size)
      height: "100%", // Slider line takes full height of its container (shrinks adaptively for device size)
      perPage: 8, // Number of the thumbnail images // TODO dynamic!
      rewind: false,
      pagination: false,
      useIndex: true,
      focus: "center", // TODO
      isNavigation: true, // Makes thumbnails clickable
      arrows: false,
      updateOnMove: true, //Updates the is-active status class just before moving the carousel for nicer transition
    };

    #mainSplide;
    #thumbnailSplide;

    #mainSplideEl;
    #thumbnailSplideEl;

    #mounted = false;

    constructor() {
      super();

      /* Get links to already generated HTML markup for sliders */
      this.#mainSplideEl = document.querySelector(
        ".fullscreen-gallery__main"
      ) as HTMLElement;
      this.#thumbnailSplideEl = document.querySelector(
        ".fullscreen-gallery__thumbnail"
      ) as HTMLElement;
    }

    open(photoNumber) {
      /* Initialize main and thumbnail slides */
      if (!this.#mounted) {
        this.initSliders();
        this.#mounted = true;
      }

      /* Jump focuse to the specific slide */
      this.#mainSplide.Components.Controller.scroll(
        photoNumber * this.#mainSplide.Components.Layout.slideSize() * -1, // Negative destination because of css transform (-x)
        2, // Scroll duration - almost instantly
        true, // Snap to slides
        function () {
          // After main slide, jump focuse of the thumbnail as well
          this.#thumbnailSplide.options = { speed: 0 };
          this.#thumbnailSplide.go(photoNumber);
          this.#thumbnailSplide.options = { speed: 200 };
        }.bind(this)
      );
    }

    /* Initialize sliders, ref: https://splidejs.com/guides/getting-started/ */
    initSliders() {
      console.log("Init gallery");

      this.#mainSplide = new Splide(
        this.#mainSplideEl,
        FullscreenGallery.mainSplideOptions
      );
      this.#thumbnailSplide = new Splide(
        this.#thumbnailSplideEl,
        FullscreenGallery.thumbnailSplideOptions
      );

      /* Mount and syncronize main with thumbnails */
      this.#mainSplide.sync(this.#thumbnailSplide);
      this.#mainSplide.mount();
      this.#thumbnailSplide.mount();

      return true;
    }
  }

  // Tell the browser to use FullscreenGallery class for <fullscreen-gallery> elements (magic of reusable web components https://web.dev/custom-elements-v1/)
  customElements.define("fullscreen-gallery", FullscreenGallery);
</script>
