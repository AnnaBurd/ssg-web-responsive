---
const { popupid } = Astro.props;
---

<pop-up class="popup" id={popupid}>
  <div class="popup__content">
    <div class="popup__close">
      <svg class="popup__close-icon">
        <use href="/icons.svg#close"></use>
      </svg>
    </div>
    <slot />
  </div>
</pop-up>

<style lang="sass">
  .popup
    /* Fix popup position on top of page */
    width: 100%
    height: 100%
    position: fixed
    top: 0
    left: 0
    background-color: rgba(#000, 0.6)

    /* Center content */
    display: flex
    flex-direction: column
    align-items: center
    justify-content: center

    /* Hide popup in default state */
    visibility: hidden
    opacity: 0
    z-index: -1 // Below page content
    transition: visibility 0s .8s, opacity .8s ease, z-index 0s 0.6s // Transition on closing
    &__content
      margin-left: var(--container-padding)
      margin-right: var(--container-padding)
      box-shadow: var(--shadow-medium)
      border-radius: var(--border-radius-medium)
      overflow: hidden
      position: relative
      transform: scale(.5) // Reduced size in hidden state creates growing pop-up animation
      transition: transform 0.3s cubic-bezier(.22,.61,.36,1)

    /* Close button */
    &__close
      position: absolute
      right: 0
      top: 0
      padding: .8rem
      color: var(--color-grey-dark-1)
      z-index: 1005
    &__close-icon
      width: 2rem
      height: 2rem
      fill: currentColor
      cursor: pointer
      opacity: .1
      transition: opacity .2s
      &:hover
        opacity: 1

  /* Popup in visible state */
  .popup[open]
    visibility: inherit // visible
    opacity: 1
    z-index: 11 // On top of navbar
    transition: opacity 1.2s ease-out, visibility 0s, z-index 0s // Transition on opening
    & .popup__content
      transform: scale(1)
      transition: transform 0.3s cubic-bezier(.2,.41,.85,1.23) 0s

  /* Style popup content for image gallery */
  #popupGallery
    .popup__content
      position: unset
      overflow: visible
      box-shadow: none
      transform: scale(1)
    .popup__close
      right: -2rem
      top: -3rem
    .popup__close-icon
      color: var(--color-grey-light-1)
      opacity: .5
      &:hover
        opacity: 1
</style>

<script>
  class PopUp extends HTMLElement {
    #open;

    constructor() {
      super();
      console.log("Hello from Popup element!", this);

      /* Set listeners to close pop-up element */
      // 1. Close popup with close button (x)
      this.querySelector(".popup__close-icon").addEventListener(
        "click",
        this.hide.bind(this)
      );

      // 2. Also close popup when user clicks ouside the popup content
      this.addEventListener(
        "click",
        function (event) {
          if (!this.#open) return;

          if (!event.target.closest(".popup__content")) {
            this.hide();
          }
        }.bind(this)
      );

      // 3. Also close popup with esc key
      document.addEventListener(
        "keydown",
        function (event) {
          if (this.#open && event.key === "Escape") this.hide();
        }.bind(this)
      );
    }

    get open() {
      this.#open = this.hasAttribute("open");
      return this.#open;
    }

    set open(value) {
      if (value) {
        this.setAttribute("open", "");
        this.#open = true;

        // TODO should open popup prevent scroll of the page?
      } else {
        this.removeAttribute("open");
        this.#open = false;
      }
    }

    show() {
      if (this.#open) return; // Popup is already visible

      this.open = true;
    }

    hide() {
      if (!this.#open) return; // Popup is already hidden

      this.open = false;
    }
  }

  // Tell the browser to use PopUp class for <pop-up> elements (magic of reusable web components https://web.dev/custom-elements-v1/)
  customElements.define("pop-up", PopUp);
</script>
